-------Computer Representation of Data-------

8 bits is called a byte.

A byte can represent 2^8 combinations (256 combinations altogether).

----------------

Binary (Base 2): 101 = 5

Translation (Base 10): 1*2^2 + 0*2^1+1*2^0 = 5		- The position of the 1 determines what power 2 is raised to (initial position starts with 0).  
					(101 is indexed from position 0 to position 2).

Binary (Base 2): 10110110 = 182

Translation (Base 10): 1*2^7 + 0*2^6 + 1*2^5 + 1*2^4 + 0*2^3 + 1*2^2 + 1*2^1 + 0*2^0 = 182

Convert from Base 10 to Base 2:

761

Subctract the largest 2^(some power) from 761
	2^9 = 512
	We fill in a one in the 2^9 place

Now 761 - 512 = 249

Now repeat, and examine spots to 2^0

-----------------Hex (Base 16)----------------

Divide a binary number into subgroups that consist of 4 digits each

Recalculate the value for each subgroup and substitue corresponding letter and number for that subgroup

------------------

We can also represent negative numbers. The leftmost digit is for the sign change (negative/positive). 

We tell the system whether to read these numbers a signed integer (account for pos/neg), 
	or an unsigned integer (include left most digit in the calculation of its value)

11111111	-1
11111110 	-2
...
10000000	-128
01111111	127
...
00000001	1
00000000	0

-------------------Integers--------

byte	
	- 8 bits 
	- Ranges from -128 to 127

short	
	- 16 bits = 2 bytes
	- Ranges from -32000 to 32000

int 	(commonly used)
	- 32 bits = 4 bytes
	- Ranges from -2^31 to 2^31 - 1

long
	- 64 bits = 8 bytes
	- Ranges from -2^63 to 2^63 - 1

- The highest decimal represented with 2's complement is always 2^(number of bits - 1) - 1.
- The lowest decimal represented with 2's complement is always -2^(number of bits - 1)

Ex:
	The highest decimal divisible by 32 (2^5) is going to end with 00000 (these positions go up to 2^5), then we fill 
	in the rest of the spots in the left with 1's (except for the leftmost digit - which is for negative numbers).
	This equals 96 as the highest number divisible by 32. 

-------------------Floating point numbers (decimals)-----

float
	- 32 bits

double	(commonly used)
	- 64 bits


-----------------Adding Binary digits------------------------

  00111
+01110

When it's 1 + 0, the answer below is 1, and you cary the 0.

When it's 1 + 1 + 0, that equals 2 in base 10, which is represented by 10 in binary. Write down the 0 and Carry the 1.

When it's 1 + 1 + 1, that's 3, which in binary is 11. Write down the 1 and carry the 1.

Those are the only scenarios you'll have when adding two binary digits together, continue until you move
	completely from right to left. 


------------Complication in Representation of Signed Integers-------------

100000000	- "negative" zero, which is equal in value to just 0
000000000	- "positive" zero, which again also equals zero

HOWEVER:

In a program, it wil recognize that these two integers are not equal, because they're represented differently

The two's complement notation solves this, by seeing if they add to zero. 
However, that leads us to have an extra negative number represented. 
See Invitation to CS - S&G for more info on the two's complement notation.


-------------Decimal Notation---------------

We must covert the number to scientific notation. 

M is the mantissa, B is the exponent base (usually 2), and E is the exponent

+- M * B^(+- E)	(+- means positive or negative)

The decimal binary go from halves, to quarters, to eights, etc..

2^-1, 2^-2, 2^-3, etc...

(The same way we go 10^-1, 10^-2, etc.. in decimal notation)

----Ex:

	5.75 = 101.11 * 2^0		- the .11 is like 2^-2 + 2^-1 = 1/4 + 1/2 = 3/4 or 0.75

Now we normalize it:

	0.10111 * 2^3		- Moving decimal point three positions to the left = increase exponent on the 2 by three
	
	(1/2 + 1/8 + 1/16 + 1/32) * 2^3 = 5.75

Now we store this number:

0	101110000	0	00011

Sign of mantissa	Mantissa (9 bits)	Sign of exponent	Exponent (5 bits) 


Final representation: 

	0101110000000011

REMEMBER: Every pattern of binary digits has multiple interpretations. 
	   The correct interpretation is determined only when the binary pattern is used in a specific way. 

ASCII, for example, is a code-mapping that we all pretty much use, to keep our interpretation of data consistent.


--------------------------Why Binary? - Reliability----------------

We assign a digit to represent a unique energy state.

HOWEVER, since old and well-used machines tend to lose a few percent of their voltage over time, having many 
energy states would eventually cause an 8 to change to a 7, and etc..

If we just leave it at, Full On/Full Off as our representation of two digits, machines can continue to work
	RELIABLY for a long, long time
