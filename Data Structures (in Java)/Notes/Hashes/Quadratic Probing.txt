Quadratic probing eliminates the primary clustering problem of linear probing.

As expected, the collision function is QUADRATIC. 

The popular choice is: f(i) = i ^ 2

For linear probing, it's a bad idea to let the hash table get nearly full.
However, for quadratic probing, the situation is even MORE drastic. 

There is no guarantee of finding an empty cell once the table gets more than half full,
	or even before the table gets half full if the table size is NOT PRIME. 


THEOREM 5.1:
		If quadratic probing is used, and the table size is prime, then a new element can always be
		inserted if the table is AT LEAST half empty (i.e. AT MOST half full).


If the table is even one more than half full, the insertion could fail (although it's very unlikely)

If the table size is not prime, the number of alternative locations can be severely reduced.

	Ex: if the table size were 16, then the only alternative locations would be at distances 1, 4, or 9 away. 

IMPORTANT: Determine the size of the table BASED on the TYPE OF PROBING you're doing. 
	      NOT the other way around.

Standard deletion cannot be performed in a probing hash table, because the cell might have caused a collision
to go past it 

	Ex:
		Linear probing
		
		If we remove an element at an array index, the elements that were placed ELSEWHERE due to a 
		COLLISION with the element will NOT be successfully found by the "contains" method now.
			Because it will stop at the supposed array index, and not see an element there. 

Thus, probing hash tables require LAZY DELETION. 

----------------------------Constructing Hash Table and HashEntry Cells----------------------------------------------------------------

Instead of an array of lists, we have an array of hash table entry cells.

Each entry in the array of HashEntry references either:

	1. null
	2. Not null, and the entry is ACTIVE 			(isActive = true)
	3. Not null, and the entry is MARKED DELETED 		(isActive = false)

Constructing the table thus consists of allocating space and then setting each HashEntry reference to null.

Ex:
	public class QuadraticProbingHashTable<AnyType>
	{
		/**
		  * Construct hash table
		*/
		public QuadraticProbingHashTable()
		{
			this( DEFAULT_TABLE_SIZE );
		}

		/**
		  *  Construct the hash table.
		  *  @param size the approximate intial size.
		  */ 
		public QuadraticProbingHashTable( int size )
		{
			allocateArray( size );
			makeEmpty();
		}

		/**
		  * Make the hash table logically empty
 		  */
		public void makeEmpty()
		{
			currentSize = 0;
			for( int i = 0; i < array.length; i++ )
				array[ i ] = null;
		}

		/**
		  * Internal method to allocate array
		  * @param arraySize the size of the array
		  */
		private void allocateArray( int arraySize )
		{
			array = new HashEntry[ nextPrime( arraySize ) ];
		}

		private static class HashEntry<AnyType>
		{
			public AnyType element;	// the element
			public boolean isActive;	// false if marked deleted
		
			public HashEntry( AnyType e )
				{ this(e, true); }
	
			public HashEntry( AnyType e, boolean i )
				{ element = e; isActive = i; }
		}
	
		private static final int DEFAULT_TABLE_SIZE = 11;
		
		private HashEntry<AnyType> [] array;		// the array of elements
		private int currentSize;			// the number of occupieid cells


--------------------------------------------Contains, findPos, and isActive----------------------------------------------------------------------------

"contains" invokes private methods "findPos" and "isActive"

The private method "findPos" performs the conflict resolution.

Ex:
	/**
	 * Find an item in the hash table.
	 * @param x the item to search for
	*  @return the matching item
	*/
	public boolean contains( AnyType x )
	{
		int currentPos = findPos( x );
		return isActive( currentPos );
	}

	/**
	 * Method that performs quadratic probing resolution in HALF-EMPTY table
	 * @param x the item to search for	
	 * @return the position where the search terminates
	 */
	private int findPos( AnyType x )
	{
		int offset = 1;
		int currentPos = myhash( x );
	
		//NOTICE: This is the collision resolution, offsetting the probe if the element
		//  		  at the myhash index does not match the desired element

		while( array[ currentPos ] != null &&			// The ORDER of these conditions
			!array[ currentPos ].element.equals( x ))		//    is IMPORTANT. DON'T SWITCH
		{
			currentPos += offset;   //Compute the ith probe
			offset += 2;
			
			if( currentPos >= array.length )
				currentPos -= array.length;
		}
	
		return currentPos;
	}

	/**
	 * Return true if currentPos exists and is active.
	 * @param currentPos the result of a call to findPos
	 * @return true if currentPos is active
	 */
	private boolean isActive( int currentPos )
	{
		return array[ currentPos ] != null && array[ currentPos ].isActive;
	}


In the implementation above, elements that are marked as deleted COUNT as being in the table.
	This can cause the table to get too full prematurely.

This is addressed in our quadratic resolution.

The definition of the quadratic resolution function is: f(i) = f( i - 1 ) + 2i - 1

	So the next cell to try is a distance from the previous cell tried and this distance increased by 2
		on successive probes. 
	
	If the new location is past the array, notice how it's put back in range by subtracting TableSize

NOTE: The order of testing in the while statement, with the testing for "null" before the testing of the element 
	to be equal to"x", is IMPORTANT. 

	DON'T SWITCH


------------------------------------------------------------Insert-----------------------------------------------------------------------------

NOTICE: We ensure in the "insert" routine that the hash table is at least TWICE as large as the number of elements in 
	the table, so quadratic resolution will always work.

We do nothing if "x" is alraedy present.
Otherwise, we place it at the location suggested by "findPos"

If the load factor exceeds 0.5, the table is full and we ENLARGE the hash table. 
	This is called REHASHING. 

Ex:
	/**
	 * @param x the item to insert
	 */
	public void insert( AnyType x )
	{

		int currentPos = findPos( x );
	
		if( isActive( currentPos ))
			return;
		
		//Insert x as active
		array[ currentPos ] = new HashEntry<>(x, true);

		//Rehash
		if( ++currentSize > array.length / 2)
			rehash();
	}

	/**
	  * @param x the item to remove
	 */
	public void remove( AnyType x )
	{
		int currentPos = findPos( x );
	
		if( isActive( currentPos ))
			array[ currentPos ].isActive = false;		// LAZY DELETION
	}
		

------------------------------------------------------------------------------------------------------------------------------------------------------

Even though quadratic probing eliminates PRIMARY CLUSTERING, there will still be elments that hash to the same
	position that will probe the SAME alternative cells. 
	
	Thus, we have SECONDARY CLUSTERING.

Secondary clustering, however, only causes less than an extra half probe per search.

We can eliminate Secondary Clustering with DOUBLE HASHING, at the cost of computing an extra hash function.
`