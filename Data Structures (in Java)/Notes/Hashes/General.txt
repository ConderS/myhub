Hashing is a technique used for performing insertions, deletions, and searches in constant average time.

The central data structure we will discuss is called the HASH TABLE.

------------------------------------------------------------------------------------------

The ideal hash table data structure is merely an array of some fixed size, containing items

A search is performed on some data field (on some part) of the item. 

This PART/DATA FIELD of the item is called the KEY. 
	- An item could consist of additional data fields, but the data field we search for is called the KEY

We will refer to the size of the hash table, or the size of the ARRAY, as TableSize.

The common convention is to have the table run from 0 to TableSize - 1. 

--------------------------------------------------------------------------------------------

Each key is mapped into some number in the range 0 to TableSize - 1 and placed in the appropriate cell.

This mapping is called the HASH FUNCTION. 
	This is ideally simple to compute, and ensures that any two distinct keys get DIFFERENT cells

However, since there are a finite number of cells and a virtually inexhaustible supply of keys, we want
	a hash function that distributes the keys EVENLY among the cells.

The problems are:
		1. Choosing a function
		2. Deciding what to do when the two keys hash to the same value: also known as a COLLISION
		3. Deciding on the table size


--------------------------------------------------------HASH FUNCTION---------------------------------------------------------------

It is often a good idea to ensure that the table size is prime.

Usually, the keys are strings. 

In the case below, we add up the ASCII (Unicode) values of the characters in the string.

Ex:

	public static int hash( String key, int tableSize )
	{
		int hashVal = 0;
		
		for( int i = 0; i < key.length(); i++)
			hashVal += key.charAt( i );
	
		return hashVal % tableSize;
	}


Not a good hash function because a string with the same kind of characters and table size will return the 
	same value, and create a collision.

If the table size is large, the function also does not distribute the keys well. 
	For ex: if the table size is 10,007, and all the keys are 8 or fewer characters long, then the hash function
		only assumes values between 0 and 1016 (or 127 * 8).
	This is clearly NOT an equitable distribution. 


----------------------------------------------------------------------------

Another hash function is shown below.

This hash function assumes that the Key has at least 3 characters. 

The value 27 represents the number of letters in the English alphabet plus the blank.

729 is 27^2. 

This function only examines the first three characters, 
	but if these characters are RANDOM, and the table size is 10,007, then we would expect a reasonably equitable distribution. 

	Ex: 	26 ^ 3 = 17,567 combinations  (ignoring blanks)

HOWEVER, English is not random. 

A check on the dictionary shows that there are only 2851 combinations of characters that make up WORDS. 

As a result, even if none of these combinations collide, only 28% of the table is actually hashed to. 
		(2851/10007 = 0.28)
		Number of Combinations / Table Size = Percent of Table Size hashed to 
			(if by luck none of these combinations collide)
THEREFORE, it's not appropriate if the hash table is too large.

Ex:

	public static int hash( String key, int tableSize )
	{
		return ( key.charAt( 0 ) + 27 * key.charAt( 1 ) + 729 * key.charAt( 2 ) ) % tableSize;
	}
	

Also, if you have the same pre-fix or post-fix words, you would get the same hash value.
	INCREASING the chance of collisions (which we want to AVOID)


-------------------------------------------------------------------------------

The hash function is below is a good hash function.

This hash function can be generally expected to distribute well (but is still not the best at it)

If the keys are very long though, the hash function will take too long to compute. 

Ex:	
	
	public static int hash( String key, int tableSize )
	{
		int hashVal = 0;
	
		for( int i = 0; i < key.length(); i++) 
			hashVal = 37 * hashVal + key.charAt( i );
	
		hashVal %= tableSize;
	
		if( hashVal < 0 )
			hashVal += tableSize;
	
		return hashVal;
	}


Some programmers implement their hash function by using only the characters in odd spaces, with the idea
	that the time saved computing the hash function will make up for a slightly less evenly distributed function. 

The main programming detail left is collision resolution. 


--------------------------------------------------Hash code----------------------------------------------

You can use ".equals()" to see if two hash codes are equal.