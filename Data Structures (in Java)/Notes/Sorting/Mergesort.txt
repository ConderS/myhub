
Worst Case:	 O(NlogN)  running time

-----------------------Strategy-------------------------

Merging two sorted lists -> Classic divide and conquer strategy, a powerful use of recursion

The basic merging algorithm takes:
		
	Two input arrays A and B
	One output array C
	Three counters:	Actr, Bctr, and Cctr	
		Initially set at the beginning of their respective arrays

1. The smaller of A[Actr] and B[Bctr] is copied to the next entry in C

2. The counter of the array in which the smaller number came from, is advanced.

3. When either list is exhausted, the remainder of the other list is copied to C


Ex:
	/**
	 * Internal method that makes recursive calls
	 * @param a an array of Comparable items
	*  @param tmpArray an array to place the merged result
	* @param left the left-most index of the subarray
	* @param right the right-most index of the subarray
	*/
	private static <AnyType extends Comparable<? super AnyType>>
	void mergeSort( AnyType[] a, AnyType[] tmpArray, int left, int right )
	{
		if( left < right )
		{
			int center = ( left + right ) / 2;
			mergeSort( a, tmpArray, left, center );
			mergeSort( a, tmpArray, center + 1, right );
			merge( a, tmpArray, left, center + 1, right );
		}
	}

	/**
	  * Mergesort algorithm
	 * @param a an array of Comparable items
	 */
	public static <AnyType extends Comparable<? super AnyType>>
	void mergeSort( AnyType[] a)
	{
		AnyType[] tmpArray = (AnyType[]) new Comparable[ a.length ];
	
		mergeSort( a, tmpArray, 0, a.length - 1 );
	}

	/**
	  * Internal method that merges two sorted halves of a subarray
	 * @param a an array of Comparable items
	 * @param tmpArray an array to place the merged result
	* @param leftPos the left-most index of the subarray
	* @param rightPos the index of the start of the second half
	* @param rightEnd the right-most index of the subarray
	*/
	private static <AnyType extends Comparable<? super AnyType>>
	void merge( AnyType[] a, AnyType[] tmpArray, int leftPos, int rightPos, int rightEnd)
	{
		int leftEnd = rightPos - 1;
		int tmpPos = leftPos;
		int numElements = rightEnd - leftPos + 1;
	
		//Main loop
		while( leftPos <= leftEnd && rightPos <= rightEnd )
			if( a[ leftPos ].compareTo( a[ rightPos ] ) <= 0 )
				tmpArray[ tmpPos++ ] = a[ leftPos++ ];
			else
				tmpArray[ tmpPos++ ] = a[ rightPos++ ];
		
		while( leftPos <= leftEnd )	//Copy rest of first half
			tmpArray[ tmpPos++ ] = a[ leftPos++ ];
	
		while( rightPos <= rightEnd )	//Copy rest of right half
			tmpArray[ tmpPos++ ] = a[ rightPos++ ];

		//Copy tmpArray back
		for( int i = 0; i < numElements; i++, rightEnd-- )
			a[ rightEnd ] = tmpArray[ rightEnd ];
	}

-------------------Analysis----------------------

Worst Case:	 O(NlogN)  running time

Mergesort uses the LOWEST number of comparisons of all the popular sorting algorithms

A good candidate for general-purpose sorting in Java	
	It is actually the one used in the standard Java library for generic sorting