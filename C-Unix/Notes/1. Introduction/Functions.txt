Like Java.


int power(int base, int n)
{
	int i, p;

	p = 1;
	
	for(i=1; i<=n; ++i) 
		p = p * base;
	return p;
}

Scope of variables inside the function are also equivalent to that of Java


--------------------

#include <stdio.h>

int power(int m, int n);

main()
{
	int i;

	for (i = 0; i< 10; ++i) 
		printf("%d %d %d\n", i, power(2, i), power(-3, i));
	return 0;
}

!!NOTICE:   There is a return statement at the end of 'main' 
	This means it returns a value to the environment in which the program is executed

	Usually, a return value of 0 signifies normal termination.

	Non-zero values signifies ERRONEOUS termination conditions (as long as we set them in the first place)


The declaration "int power(int m, int n);" is a FUNCTION PROTOTYPE
	
	(We have it in a different file in UNIX, sometimes)

It is an error if our definition of the function later on or any uses of it later on, do not agree with its prototype.
	
	(Parameter names are optional and need not agree)

-------

!!NOTICE: The arguments put into a function, are AFFECTED by what the function does.

	It doesn't have to return the parameter passed in, FOR THAT PARAMETER TO CHANGE OUTSIDE. 
