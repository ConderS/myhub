char	From -128 ~ 127	
	-2^7 ~ 2^7 - 1

short	From - 32768 ~ 32767
	- 2^15 ~ 2^15 - 1

int	-2G ~ 12G
	-2^31 ~ 2^31 - 1

long	- 32 bit or 64 bit

long long - 64 bit


Unsigned: Starts range from 0 (maintainig the full breadth - 2's complement)

	Ex:
		Unsigned short: 
				0 ~ 2^16 - 1

uint32_t 	x;
int8_t 	c;

------------------

2^8 = 256

2^10 = 1024	~ 1000

2^28 = 1,000,000	~ 1 million

2^30 = 1000,000,000 ~ 1 billion

2^32 = 4G

------2's Complement-----

Calculating negative binary digits of 2's complemenet

	Make the leftmost bit (Most Significant BIt = MSB) negative. 
	And continue adding it to the value of the rest of the bits.

1101

	= -1 * 2^3 + 2^2 + 2^0
	= -8 + 4 + 1
	= -3

2's complement subtraction:	flip the digit, binary add 1

	- Also just adding Sum of a+b to the negated version of 'b', will get a. 


----------------------------------

char c = 'a';
	
	- 'a' is not a 'character'. It's a number. AKA its ASCII value (97)

int x;

x = 'a' + 2;

	- 'x' equals 99 here.                   


char c = '0';
	
	- Not 0. (ASCII = 48)

'\13'	- This will represent 13
'\0'	- This will represent 0 (actually 0)


---------------------------------------

float y = 3.14f;
		- Not necessary in this case, but the 'f' signifies a float number. 

Expressions:

x
6+'a'

Statements:

	Ends with semicolon

	if..
		..... ;

