{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf810
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww33400\viewh20520\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
\
\
\'97\'97recipes.component.html\'97\'97\'97\
\
\
	<!-- ng-template \
\
			Serving as dummy text here.\
\
		Using this and a marker to display information when ngIf evaluates to false and hides the app-recip-detail \
\
			Using 'ngIf' here also prevents the ERROR messages from trying to load the component with a NULL property (before it has been selected)\
		-->\
\
	
\b 	<app-recip-detail \ul *ngIf="sRecipe; else infoText"\ulnone  [selectedRecipe] = "sRecipe"></app-recip-detail>\
		\
			\ul <ng-template #infoText>\
				<p>Please select a Recipe!</p>\
			</ng-template>\
\
\
\
\

\b0 \ulnone \'97\'97recip-item.component.ts\'97\'97\
\

\b @Output() selectEvent = new EventEmitter<void>();\
\
  constructor() \{ \}\
\
  ngOnInit() \{\
  \}\
\
  onSelected() \{\
\
\
  	
\b0 // We don't need to emit the recipe because the ngFor loop would have access to this element at this iteration.\
\
  	// this.selectEvent.emit(this.recipe);\

\b \
\
  	this.selectEvent.emit();\
  \}\
\
\
\
\

\b0 \'97\'97recip-list.component.html\'97\'97\
\
\
		<!-- NOTE: We only need to pass in the recipeElement of the for loop.\
\
		This is why we didn't give any event data. -->\
\

\b 		<app-recip-item *ngFor = "let recipeElement of recipes" [recipe] = "recipeElement" (selectEvent) = "eventSelected(recipeElement)"></app-recip-item> \
\
\

\b0 \'97\'97\
\
\'85\
\
All the other stuff is normal data binding and event passing}