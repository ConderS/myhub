{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf810
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww33400\viewh20520\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
\'97shop.service.ts\'97\'97\
\

\b import \{ EventEmitter \} from '@angular/core';\
\
import \{ Ingredient \} from '../shared/ingredient.model';\
\
export class ShopService \{\
	\
	ingredientsChanged = new EventEmitter<Ingredient[]>();\
\
	ingredients: Ingredient[] = [\
		new Ingredient('Apples', 5),\
		new Ingredient('Tomatoes', 10)\
	];\
\
	getIngredients() \{\
\
		return this.ingredients.slice();\
	\}\
\
	addIngredient(ingredient: Ingredient) \{\
\
		this.ingredients.push(ingredient);\
\
	
\b0 	//Emits an event that returns a copy of the new array\
		// OTHERWISE: shop-list only has a copy of the previous array to work with and changing the list from 'shop-list-edit' wouldn't do anything to that\
\
		// We make sure that shop-list receives this new array
\b \
		\
		this.ingredientsChanged.emit(this.ingredients.slice());\
	\}\
\
\}\
\
\

\b0 \'97\'97shop-list-edit.conponent.ts\'97\'97\
\

\b addRecipe() \{\
\
		const ingName = this.ingredName.nativeElement.value;\
		const ingAmount = this.ingredAmount.nativeElement.value;\
\
		const newIngred = new Ingredient(ingName, ingAmount);\
\
		
\b0 //this.onIngred.emit(newIngred);\
\
		//This doesn't work if the shop-list array is a copy of the ShopService array (from .slice())
\b \
		\
		this.shopService.addIngredient(newIngred);\
	\}\
\
\

\b0 \
\'97\'97shop-list.component.ts\'97\'97\
\
  //Remember to do your initializations on ngOnInit\
\

\b   ngOnInit() \{\
\
    this.ingredients = this.shopService.getIngredients();\

\b0 \
    // Receiving the new array \
    \

\b     this.shopService.ingredientsChanged.subscribe(\
      (ingredients: Ingredient[]) => \{\
         this.ingredients = ingredients;\
      \});\
  \}\
}