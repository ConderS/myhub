{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf810
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww33400\viewh20520\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
\'97servers.component.html\'97\'97\
\
<!-- '$event' is  a reserved key word you can use in the template when you're doing eventbinding \
\
 			'$event' holds the data that the event outputs after it is triggered.\
\
 			EX: (click) will have its coordinates of where it was clicked in $event\
			\
			$event will pass the value of 'input' event data ANYWHERE within the quotation marks set to (input)\
\
			NOTE: 'target' - one of the outputted Event properties, refers to the target HTML from which this event was triggered\
 			-->\
\

\b <input type="text" \
			class = "form-control"\
			(input) = "onUpdateServerName($event)">\
<p>\{\{ serverName \}\}</p>
\b0 \
\
\
\
\'97servers.component.ts\'97\'97\'97\
\
\
 //Receiving the $event data from the html\
\
 
\b  onUpdateServerName(event: Event) \{\

\b0 \
    //Note, we have to explicitly cast the value to Input element because 'value' is not available to ALL EVENT TARGETS (the type that we have 'event' defined as in the param)\
    //Casting generics, basically\
\

\b     this.serverName = (<HTMLInputElement>event.target).value;\
\
  \}}