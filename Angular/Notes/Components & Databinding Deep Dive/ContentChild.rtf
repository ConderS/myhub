{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf810
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww33400\viewh20520\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
\
\'97server-element.component.ts\'97\'97\
\
// Content Child\
	// 		We access the content IN BETWEEN THE TAGS of this component's HTML tag selector in the app.component.html\
	//		This means it accesses the <p> stuff in the app.component.html\
	\
	//We can use this like any other ElementRef element. Referencing nativeElement to get to the HTML element and using its properties thereafter\
\

\b 	\ul @ContentChild('contentParagraph') paragraph: ElementRef;\
\
\
\

\b0 \ulnone \'97app.component.html\'97\
\

\b  <app-server-element *ngFor="let serverElement of serverElements"\
    [srvElement]="serverElement">\
     \
\
          <p \ul #contentParagraph\ulnone >\
            <strong *ngIf="element.type === 'server'" style="color: red">\{\{ element.content \}\}</strong>\
            <em *ngIf="element.type === 'blueprint'">\{\{ element.content \}\}</em>\
          </p> \
\
\
\
\
    </app-server-element>}