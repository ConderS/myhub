{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf810
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww33400\viewh20520\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
This even allows us to skip over using the renderer. \
\
Using the renderer is not wrong though.\
\
Directive\'92s way of binding to properties\
\
\'97\'97better-highlight.directive.ts\'97\'97\
\

\b export class BetterHighlightDirective implements OnInit \{
\b0 \
\
	// Host Binding\
	//backgroundColor is a property we're defining\
\
	// Inside HostingBinding() we define - to which property of the host element we want to bind to \
		// i.e. style \
		// i.e. style.backgroundColor \
\
	// Camel case is important here. \
	// We're accessing the DOM property, which doesn't know dashes.\
\
	//We set this property equal to the 'backgroundColor' property that we define here\
\
	//NOTE: We need to initialize it so that it doesnt throw an error before we first mouse over it\
\
\ul 	
\b @HostBinding('style.backgroundColor') backgroundColor: string = 'transparent';
\b0 \ulnone \
\
	//Now we can set things to 'backgroundColor' as if it were actually the 'style.backgroundColor' property\
\
\
	
\b \'85.\

\b0 \

\b @HostListener('mouseenter') mouseover(eventData: Event) \{
\b0 \
		\
  	// this.renderer.setStyle(this.elRef.nativeElement, 'background-color', 'blue');\
\
  	//Host Binding\
\
  	
\b \ul this.backgroundColor = 'blue';\ulnone \
	\}\

\b0 \
	
\b @HostListener('mouseleave') mouseleave(eventData: Event) \{
\b0 \
		\
  	//this.renderer.setStyle(this.elRef.nativeElement, 'background-color', 'transparent');\
	\
\ul 		
\b this.backgroundColor = 'transparent';\ulnone \
	\}}