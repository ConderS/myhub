{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf810
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww33400\viewh20520\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
\'97server.component.html\'97\'97\
\
<!-- \
		====String Interpolation=====\
\
		You can write a TypeScript expression within the \{\{\}\}\
			NOTE: these are variables/properties within the CLASS\
\
			Any expression which can be resolved to a string is valid for string interpolation - methods, variables, etc...\
				NOTE: NUMBERS CAN BE CONVERTED INTO STRINGS - so 'serverID' works!\
\
			This means you can hardcode strings with the \{\{\}\} symbols (but it'd obviously be unnecessary to do something like that)\
\
			HOWEVER, you cannot write multiline expressions in here or block expressions. 'if..then' or 'for' structure are therefore not valid. \
\
			Ternary expressions WOULD be valid\
\
			-->\
\

\b <p>\{\{ 'Server' \}\} with ID \{\{ serverID \}\} is \{\{ getServerStatus() \}\}</p>\
\
\
\

\b0 \'97server.component.ts\'97\'97\'97\
\

\b export class ServerComponent \{
\b0 \
\
	//Don't have to explicitly state the types, but it's optional \
	// TypeScript feature\
\

\b 	serverID: number = 10;\
	serverStatus: string = 'offline';
\b0 \
\
	//Defining a server in TypeScript\
\

\b 	getServerStatus() \{\
			return this.serverStatus;\
	\}\
\}\
}