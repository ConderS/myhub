{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf810
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 HelveticaNeue;\f2\fmodern\fcharset0 Courier;
}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;\red255\green255\blue255;\red197\green35\blue42;
\red241\green241\blue241;}
{\*\expandedcolortbl;;\cssrgb\c20000\c20000\c20000;\cssrgb\c100000\c100000\c100000;\cssrgb\c82353\c21961\c21569;
\cssrgb\c95686\c95686\c95686;}
\margl1440\margr1440\vieww33400\viewh20520\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
==app.module.ts\
\

\b const appRoutes: Routes = [\
  \{ path: '', component: HomeComponent \},\
  \{ path: 'users', component: UsersComponent, children: [\
      \{ path: ':id/:name', component: UserComponent \},\
  ] \},\
\
   \{ path: 'servers', component: ServersComponent, children: [\
    \{ path: ':id', component: ServerComponent \},\
    \{ path: ':id/edit', component: EditServerComponent \}\
   ]\},\
   \
\
\ul    \{ path: 'not-found', component: PageNotFoundComponent\},\ulnone \

\b0 \
   //Redirecting\
   //    redirectTo: '/not-found' ==> route redirects to 'localhost:4200/not-found'\
\
   //** \
   //    All paths not recognized.\
   // IMPORTANT: Make sure this is the LAST route in the array, this code is evaluated TOP - BOTTOM, so routes you define after this will be considered as UNRECOGNIZED\
\

\b \ul    \{ path: '**', redirectTo: '/not-found'\}\ulnone \
\
];\
\
\
\

\b0 ====IMPORTANT: Path Matching====\
\
\pard\pardeftab720\sl440\sa400\partightenfactor0

\f1\fs36 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 In our example, we didn't encounter any issues when we tried to redirect the user. But that's not always the case when adding redirections.\
By default, Angular matches paths by prefix. That means, that the following route will match both 
\f2 \cf4 \cb5 \strokec4 /recipes
\f1 \cf2 \cb3 \strokec2 \'a0 and just 
\f2 \cf4 \cb5 \strokec4 /
\f1 \cf2 \cb3 \strokec2 \'a0\
\pard\pardeftab720\sl420\sa400\partightenfactor0

\f2 \cf4 \cb5 \strokec4 \{ path: '', redirectTo: '/somewhere-else' \}
\f1 \cf2 \cb3 \strokec2 \'a0\
\pard\pardeftab720\sl440\sa400\partightenfactor0
\cf2 Actually, Angular will give you an error here, because that's a common gotcha:\'a0This route will now 
\b ALWAYS
\b0 \'a0redirect you!\'a0Why?\
Since the default matching strategy is 
\f2 \cf4 \cb5 \strokec4 "prefix"
\f1 \cf2 \cb3 \strokec2 \'a0, Angular checks if the path you entered in the URL\'a0does 
\b start with the path
\b0  specified in the route. Of course every path starts with 
\f2 \cf4 \cb5 \strokec4 ''
\f1 \cf2 \cb3 \strokec2 \'a0 (Important:\'a0That's no whitespace, it's simply "nothing").\
To fix this behavior, you need to change the matching strategy to
\f2 \cf4 \cb5 \strokec4 "full"
\f1 \cf2 \cb3 \strokec2 \'a0:\
\pard\pardeftab720\sl420\sa400\partightenfactor0

\f2 \cf4 \cb5 \strokec4 \{ path: '', redirectTo: '/somewhere-else', pathMatch: 'full' \}
\f1 \cf2 \cb3 \strokec2 \'a0\cb1 \uc0\u8232 \cb3 \
\pard\pardeftab720\sl440\sa400\partightenfactor0
\cf2 Now, you only get redirected, if the full path is 
\f2 \cf4 \cb5 \strokec4 ''
\f1 \cf2 \cb3 \strokec2 \'a0\'a0(so only if you got NO\'a0other content in your path in this example).\
\

\b NOTE: \'91pathMatch\'92 behaves like [routerLinkActiveOptions] = \'93\{exact: true\}\'94\
	- The first is for defining routes themselves in AppModule\
	- The second is for making sure it\'92s matching the current, exact route with a route that has already been defined in AppModule
\b0 \
}