{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf810
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww33400\viewh20520\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
==auth-guard.service.ts===\
\

\b import \{ CanActivate, ActivatedRouteSnapshot, Router, RouterStateSnapshot\} from '@angular/router';\
\
import \{ Observable \} from 'rxjs/Observable';\
import \{ Injectable \} from '@angular/core';\
import \{ AuthService \} from './auth.service';\
\
@Injectable()\
\
export class AuthGuard implements CanActivate \{\
\
\
	constructor(private authService: AuthService, private router: Router) \{\}\

\b0 \
\
	//This can run ASYNC (Observable + Promise) and SYNC (boolean)\
\
	//Auth Guard will prevent the user from accessing the route unless its canActivate function returns True\
\
	//In AppModule, if AuthGuard returns true => the servers route (where it has been placed) will allow the user to access it\
	// Else, the user will be REDIRECTED HOME\
\
	
\b canActivate(route: ActivatedRouteSnapshot,\
		state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean \{\
\
			return this.authService.isAuthenticated()\
				.then(\
						(authenticated: boolean) => \{\
							if (authenticated) \{\
								return true;\
							\} else \{\
\
								
\b0 //Redirected to Homepage after 800 ms if user is not logged in (800 ms from AuthService)\

\b \
								this.router.navigate(['/']);\

\b0 \
								//Optional\
								//return false;
\b \
							\}\
						\}\
					);\
\
	\}\
\}\
\
\
\

\b0 ===auth.service.ts===\
\
//A fake service for Auth.\
// This normally reaches out to a server of some kind - more on this later\

\b \
export class AuthService \{\
\
	loggedIn = false;\
\
	
\b0 //Faking a server\

\b 	isAuthenticated() \{\
		const promise = new Promise(\
			(resolve, reject) => \{\
				setTimeout(() => \{\
					resolve(this.loggedIn)\
				\}, 800);\
			\}\
		);\
\
		return promise; \
	\}\
\
	login() \{\
		this.loggedIn = true;\
	\}\
\
	logout() \{\
		this.loggedIn = false;\
	\}\
\
\}\
\
\

\b0 ==app-routing.module.ts===\
\

\b \'85.\

\b0 \

\b \{ path: 'servers', \ul canActivate: [AuthGuard],\ulnone  component: ServersComponent, children: [\
    \{ path: ':id', component: ServerComponent \},\
    \{ path: ':id/edit', component: EditServerComponent \}\
   ]\},\
\
\'85.\
\

\b0 ===app.module====\

\b \
\'85
\b0 \
\

\b \ul  providers: [ServersService, AuthService, AuthGuard],\
\
\
\ulnone \'85.\ul \
\
\
\
\
}