{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf810
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww33400\viewh20520\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
=====app.module.ts\
\

\b const appRoutes: Routes = [\
  \{ path: '', component: HomeComponent \},\
  \{ path: 'users', component: UsersComponent \},\
\

\b0   // Dynamic Path Segment\
  //a path with user/[anything else] will load this component\
  // That [anything else] will be interpreted as the 'id'
\b \
  \
  \{ path: 'user/:id', component: UserComponent \},\
  \{ path: 'servers', component: ServersComponent \}\
];\
\
\
\

\b0 ===User.component.ts\
\
\

\b export class UserComponent implements OnInit \{\
  user: \{id: number, name: string\};\
\

\b0   //ActivatedRoute object will give us access to the 'id' passed in the URL\
  // This will allow us to interact with the currently selected user
\b \
  constructor(private route: ActivatedRoute) \{ \}\
\
  ngOnInit() \{\
  	this.user = \{\
\

\b0   		//Getting the parameter 'id' we defined in the app.module\
  		// And now, 'name'\
		//localhost:4200/1/Max - Displays User with ID 1 and name Max\

\b 		\

\b0 		//Snapshots only gather the information at the moment the component is rendered
\b \
  		id: this.route.snapshot.params['id'],\
  		name: this.route.snapshot.params['name']\
  	\};\
	\
	
\b0 \
  	  // To be able to re-render the component based on new data, we use the 'params' Observable\
  	  //Observables allow us to work with asynchronous tasks\
\
  	 //Subscribe takes 3 functions are arguments\
  	 // First Arg - 1. Executed when new data is sent through Observable (i.e. when 'params' change)\
  	 \
  	 //This approach is best practice for detecting change in route parameters\
\

\b   	this.route.params\
  		.subscribe(\
 				(params: Params) => \{\
 					this.user.id = params['id'];\
 					this.user.name = params['name'];\
 				\}\
  			);\
  \}\
\

\b0 //NOTE: This is for comprehension purposes ONLY\
  //This is what Angular ALREADY does for you (Observables are on the Heap)
\b \
  \
  ngOnDestroy() \{\
  	this.paramsSubscription.unsubscribe();\
  \}\
\
\}}