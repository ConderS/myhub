{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf810
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww33400\viewh20520\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
//Ensuring that the user is only allowed to leave the component if they have either saved the changes or have confirmed that they are okay with discarding the changes\
\
\
==can-deactivate-guard.service.ts==\
\
\

\b import \{ Observable \} from 'rxjs/Observable';\
import \{ CanDeactivate, ActivatedRouteSnapshot, RouterStateSnapshot \} from '@angular/router';\
\

\b0 //Forces whatever component that connects to this to implement the 'canDeactivate' method 
\b \
\
export interface CanComponentDeactivate \{\
\
	canDeactivate: () => Observable<boolean> | Promise<boolean> | boolean;\
\}\
\
//Wraps our interface\
export class CanDeactivateGuard implements CanDeactivate<CanComponentDeactivate> \{\
\
	
\b0 //Has to be of type CanComponentDeactivate -> Must have canDeactivate Method 
\b \
\
	canDeactivate(component: CanComponentDeactivate, \
		currentRoute: ActivatedRouteSnapshot,\
		currentState: RouterStateSnapshot,\
		nextState?: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean \{\
\
		
\b0 //Now our ROUTER (inputted as a param into this method) can execute canDeactivate in our service for THIS COMPONENT (inputted as parm into method), and can relay on the fact that the component we're currently on HAS the canDeactivated method
\b \
		return component.canDeactivate()\
	\}\
\}\
\

\b0 ===edit-server.component.ts===\
\

\b export class EditServerComponent implements OnInit, CanComponentDeactivate \{\
  server: \{id: number, name: string, status: string\};\
  serverName = '';\
  serverStatus = '';\
\
  allowEdit = false;\
\ul \
  changesSaved = false;\ulnone \
\
  constructor(private serversService: ServersService, private route: ActivatedRoute,\
    private router: Router) \{ \}\
\
  ngOnInit() \{\

\b0 \
 
\b    this.route.queryParams.subscribe(\
       (queryParams: Params) => \{\
         this.allowEdit = queryParams['allowEdit'] === '1' ? true : false;\
       \}\
      );\
    this.route.fragment.subscribe();\
\
    const id = +this.route.snapshot.params['id'];\
    this.server = this.serversService.getServer(id);\
\
    this.route.queryParams.subscribe(\
      (params: Params) => \{\
         this.server = this.serversService.getServer(+params['id'])\
      \});\
    \
    this.serverName = this.server.name;\
    this.serverStatus = this.server.status;\
  \}\

\b0 \

\b   onUpdateServer() \{\
    this.serversService.updateServer(this.server.id, \{name: this.serverName, status: this.serverStatus\});\ul \

\b0 \
    //Allows user to leave this route\
\
    
\b this.changesSaved = true;\
    this.router.navigate(['../'], \{relativeTo: this.route\});\
  \}\
\ulnone \
  \ul canDeactivate(): Observable<boolean> | Promise<boolean> | boolean \{\
\
    if (!this.allowEdit) \{\
      return true;\
    \}\

\b0     // serverName will change when the user types into the textfield due to Two-Way Binding\
\
    
\b if ((this.serverName !== this.server.name || this.serverStatus !== this.server.status) && !this.changesSaved) \{\
      return confirm('Do you want to discard the changes?');\
    \} else \{\
      return true;\
    \}   \
  \}\
\
\

\b0 \ulnone ==app-routing.module.ts===\
\

\b  \{ \
   	path: 'servers', 
\b0 \

\b    	canActivateChild: [AuthGuard],\
   	component: ServersComponent, \
   	children: [\
    \{ path: ':id', component: ServerComponent \},\
    \{ path: ':id/edit', component: EditServerComponent,\ul  canDeactivate: [CanDeactivateGuard] \}\ulnone \
   ]\},\
\
\

\b0 ==app.module.ts==\
\

\b providers: [ServersService, AuthService, AuthGuard,\ul  CanDeactivateGuard\ulnone ],}