{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf810
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww33400\viewh20520\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
Resolver will always render the component, but it will also preload some data => fetch some data that the component will need later on\
\
	Alternative: Use \'91ngOnInit\'92 so that it displays the component and then immediately gets the data\
	\
	This is BEFORE the actual display of the component\
\
===server-resolver.service.ts===\
\

\b import \{ Resolve, ActivatedRouteSnapshot, RouterStateSnapshot\
 \} from '@angular/router';\
import \{ Observable \} from 'rxjs/Observable';\
import \{ Injectable \} from '@angular/core';\
\
import \{ ServersService \} from '../servers.service';\
\
interface Server \{\
	id: number;\
	name: string;\
	status: string;\
\}\
\
@Injectable()\
export class ServerResolver implements Resolve<Server> \{\
\
	constructor(private serversService: ServersService) \{\}\
\
	
\b0 //Executed EVERY TIME the component renders, so no need to setup an Observable - would work anyways\
	\
	//Now it loads the returned information IN ADVANCE\
\
	//This information is stored in 'server' object we defined in app-routing\
\
	//This method is automatically called by Angular when the route is loaded\
\

\b 	resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<Server> | Promise<Server> | Server \{\
			return this.serversService.getServer(+route.params['id'] );\
	\}\
\}\
\
\

\b0 ===app-routing.module.ts===\
\
 	//'server' in the resolve - now contains the returned data from ServerResolver\
   	//The 'resolve' method is automatically called in 'ServerResolver' when this route is loaded and stored in the 'server' object/property of the Component to be loaded\
\
   	//This data is sent as the 'Data' object we saw with the static data below\
	// the name we give to the object that is assigned to \'91ServerResolver (i.e. \'91server\'92) is the name we use to call the Data later\

\b     \{ path: ':id', component: ServerComponent, \ul resolve: \{server: ServerResolver\} \ulnone \},\
\
\

\b0 ==server.component.ts===\
\

\b ngOnInit() \{\

\b0 \
  	//Observable used because the data on the page CAN change while we are on it
\b \ul \
  	this.route.data\
  		.subscribe(\
  			(data: Data) => \{
\b0 \
\ulnone \
  				//The property name here MUST MATCH the property you defined in app-routing\
  				// 	i.e. \{ path: ':id', component: ServerComponent, resolve: \{server: ServerResolver\} \},\
  				\
  
\b 	\ul 			this.server = data['server'];\
  			\}\
  		 );
\b0 \ulnone \
\
  	//This will return the STRING of '1' not the number that we need to input into the 'getServers()' method\
\
  	//The '+' sign will convert the string into a number\
  	// const id = +this.route.snapshot.params['id'];\
\
   //  this.server = this.serversService.getServer(id);\
\
   //  this.route.params.subscribe(\
   //  	(params: Params) => \{\
   //  		this.server = this.serversService.getServer(+params['id']);\
   //  	\});\

\b   \}}