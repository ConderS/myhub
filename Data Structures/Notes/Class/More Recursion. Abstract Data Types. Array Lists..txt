---------------------Towers of Hanoi: More Recursion----------------------------

public class Hanoi {

	public static int move(int n , String source, String target, String help) {
		
		int steps = 0;
		if (n ==1) 	{					// base case in recursion
			System.out.println("Moving "+source+" to "+target);		// T(1) = 1
			return 1;		
		} 						// recursive case
			int steps1 = move(n-1, source, help, target);		// this runtime is T(N-1) 	- one less disk of N input
			System.out.println("Moving "+source+" to "+target);
			int steps2 = move(n-1, help, target, source);		// Total runtime = 2 * T(N-1) + 1	- Function is called twice, plus a print operation. 
			return = steps1+steps2+1;	
	}

	public static void main(String[] args) {
		int n = Integer.parseInt(args[0]);
		int steps = move(n, "A", "C", "B");
		System.out.println("Total steps: " + steps);

2* T(N-1) + 1
	- 2* (2 * T(N-2) + 1) + 1
	- 4 * T(N-2) + 2 + 1
		- 4* (2*T(N-3)+1) + 2 + 1
		
		Ultimately, when we look into this recursive function, we see that that the relation is EXPONENTIAL.
	
		The relation is: 2^k * T(N-k) + 2^(k-1) + 2^(k-2) + .... + 2^0
			         2^(N-1) .........+ 2^(N-2) + 2^(N-3) + ..... + 2^0

		Actual runtime: 2^(N) - 1

This is called the GEOMETRIC SERIES.

Sum[2^i] from i = 0 to N-1.
	
	= 2^(N) - 1

There's also ARITHMETIC SERIES.

Sum[i] from i=1 to N. 
	
	= (N*(N+!))/2

---------Inductive Proof----------

1. State base case

2. Inductive step: 
	Assume:
		By inductive hypothesis

2^i + 2^k (from i = 0 to k-1)
-----------------------------------Abstract Data Types----------------------------------

Data structure is an actual implementation of a particular abstract data type.

Abstract data types can be specified as interfaces and classes. 

An ADT = List

	Implementation of it: ArrayList

----------------The List ADT---------------------------

L is a sequence of N objects.
	N = length/size of the list
	List with length N = 0

Ai follows/succeeds Ai-1 for i > 0

Ai precedes Ai+1 for i < N

A0, A1, A2, etc... 

These elements, this sequence of objects, are NOT ORDERED, they simply come in one after another.

------Typical List Operations-----------

void printLIst()

void makeEmpty()

int size()

Object findKth(k) / get(k)

boolean insert(x, k), append(x)

boolean remoe(k)

int find(x) / indexOf(x)

Object next()

Object previous()

void removeCurrent()

--------------ArrayList---------------------

public class ArrayList { 

	public static final int DEFAULT_CAPACITY = 10;
	private int theSize;
	private Integer[] theItems;
}

	A thin layer wrapping an array