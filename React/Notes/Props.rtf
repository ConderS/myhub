{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf810
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww33400\viewh20520\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 You can reference \'93props\'94 in child function components by making sure \'91props\'92 is a parameter.\
\
In class-based components \'91props\'92 is available ANYWHERE in ANY METHOD that you define. \
\'91this.props\'92 in a class ANYWHERE would reference the props from a parent component (as long as there is indeed a parent component passing \'91props\'92 into it)\
\
This means when we refactor functional components that reference \'91props\'92, we have to update it to \'91this.props\'92\
\
NOTICE: We see \'935\'94 at first when we refresh the page because at first, it\'92s rendering the \'91props.videos.length\'92 when the array is still 0.\
		BUT, after YTSearch completes its network request, the array\'92s length is changed to 5 and the state is changed. So the entire component is re-rendered and the number changes to 5. \
\
\
\'97\'97\'97\'97index.js\'97\'97\'97\'97\'97\
\

\b class App extends Component \{\
\
			\'85\
\
	render() \{\
\
		return (\
			<div>\
				<SearchBar />\
				
\b0 \
				\{/* NOTE: We need the "state" of the parent component, the 'videos' array, into the VideoList for it to display\
\
					To do so, we do "videos = \{this.state.videos\}"\
\
					This is called PASSING 'PROPS'\
\
				 'videos' is the  prop in this case - the variable that contains 'this.state.videos'\
\
					'videos' will arrive in 'VideoList' as an ARGUMENT to its class in video_list.js \
						We call this 'props' as the input in the VideoList class to emphasize this ('props.videos' would refer to the \'91videos\'92 prop passed into the TAG)\
\
			 	*/\}\
\
				
\b <VideoList videos=\{this.state.videos\} />\
			</div>\
		);\
	\}\
\
\

\b0 \'97\'97video_list.js\'97\'97\'97\'97\
\

\b import React from 'react';\
\
const VideoList = (props) => \{
\b0 \
\
	// The below statement will equal the array of videos that YTSearch returns in the parent component index.js\
	// const videos = props.videos;\
\

\b 	return (
\b0 \
		//We use 'className' to name the class of this HTML element (just like using 'class' but avoids any naming conflicts with defining a class component)\
\
		//'col-md-4' is a BOOTSTRAP term for a 'medium column of width 4'\
\
	
\b 	<ul className = "col-md-4 list-group">\
\
			\{props.videos.length\}\
\
		</ul>\
		);\
\};\
\
export default VideoList;}