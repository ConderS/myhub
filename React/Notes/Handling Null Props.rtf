{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf810
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww33400\viewh20520\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
\
\'97index.js\'97\
\
\

\b render() \{\
\
		return (\
			<div>\
				<SearchBar />
\b0 \
			\{/* \
							Because React tries to render immediately before the API call finishes, the array is empty at first. \
\
							So this means a video=undefined, or null prop is being passed\
\
							As a result, make sure you have a check in place for VideoDetail that addresses this with a LOADING SCREEN\
			 */\}\
\
		
\b 	 	<VideoDetail video=\{this.state.videos[0]\} /> \
				<VideoList videos=\{this.state.videos\} />\
			</div>\
		);\
	\}\
\}\
\
\
\
\

\b0 \'97\'97video_detail\'97\
\

\b const VideoDetail = (\{video\}) => \{\
\
	
\b0 //When React immediately renders this component, it does so even when the array hasn't been filled by the API call yet, so we have to put a check for it as it loads\

\b \
	if (!video) \{\
		return <div>Loading...</div>;\
	\}\
\
	const videoID = video.id.videoId;\
	\
	const url = `https://www.youtube.com/embed/$\{videoID\}`;\
\
	return (\
			\'85\'85\
}