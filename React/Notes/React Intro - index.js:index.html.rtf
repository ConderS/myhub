{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf810
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww33400\viewh21000\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 React:\
		A Javascript library that produces HTML that is shown to a user in a web browser\
\
We write individual 
\b components
\b0  or 
\b views\
\
Component/View:
\b0 	Collection of javascript functions that produce HTML\
\

\i Index.js
\i0     is the root of the application, and usually contains all the other components of the website\
\
NOTE: It\'92s always \ul one component per file\
\
\ulnone \
\'97\'97index.js\'97\'97\'97\
\
//NOTE: We can't reference information in ANY other file unless we import it. And likewise for files to this file\
// This includes the React library itself!!\
//  Yup, literally, have to import EVERYTHING you need\
\
\
//Find the library in the node_modules folder named "react" and assign it to the VARIABLE React - THAT's why we can do "React.render", etc....\
\

\b import React from 'react';  
\b0 \
\
//react-dom is used to manage the actual DOM, so we use that for rendering HTML components instead\
\

\b import ReactDOM from 'react-dom';
\b0 \
\
//Create a new component. This component should produce HTML\
\
//Constant variable assigned a function that returns JSX (what looks like HTML but is behind the scenes, really just Javascript)\
\
//This App is a CLASS not an instance\
\

\b const App = () => \{
\b0 \
\
	//<div></div> actually calls "React.createElement("div", null)"\
	// 'div' is actually a component CLASS, but using it inside JSX makes it into a component \
	//		THEREFORE <App></App> will also create an INSTANCE of App\
	//		NOTE: Tags without anything inside of it can be written as self-closing. <App /> (This is a JSX quality) \
\
	
\b return <div>Hi!</div>;  
\b0 \
\
	//Babel translates this JSX into vanilla Javascript that can be interpreted inside the browser and produce the typed HTML\

\b \}
\b0 \
\
//You can use the "babeljs.io" site to see what the JSX code looks like as vanilla Javascript - very easy to get very messy!\
\
// Take this component's generated HTML and put it on the page (in the DOM)\
//React.render is ONLY available because we assigned the "react" library to the variable React\
\
\
//NOTE: When we create a component, we are creating a CLASS of a component. So if we want to render it inside the HTML, we have to INSTANTIATE it like we would an object. This includes the 'App' variable - the function is a variable that produces INSTANCES of the component\
\
//Read above at the notes on the function inside of 'App' to see why we need to use TAGS to INSTANTIATE it\
\
//The second argument of this function is the location of the HTML element that we're trying to insert 'App' into\
//   The root node that we usually insert our html into is the 'container' div, sometimes called 'app', etc...\
\
\

\b ReactDOM.render(<App />, document.querySelector('.container'));
\b0 \
\
//This says, find an element with class "container", and render the 'App' component inside that div\
\
\
\
\
\'97\'97\'97\'97index.html\'97\'97\'97\'97\'97\'97\'97\
\
<!DOCTYPE html>\
<html>\
  <head>\
    <meta name="viewport" content="width=device-width, initial-scale=1">\
    <link rel="stylesheet" href="/style/style.css">\
    <link rel="stylesheet" href="https://cdn.rawgit.com/twbs/bootstrap/48938155eb24b4ccdde09426066869504c6dab3c/dist/css/bootstrap.min.css">\
    <script src="https://maps.googleapis.com/maps/api/js"></script>\
  </head>\
  <body>\
\
 
\i \ul    <!--This is the div that is the ROOT node, where you will render your HTML from react into -->\

\i0 \ulnone \
    <div class="container"></div>\
\
  </body>\
  <script src="/bundle.js"></script>\
</html>\
}