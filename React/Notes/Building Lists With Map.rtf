{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf810
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww33400\viewh20520\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
\'97\'97video_list.js\'97\'97\'97\
\

\b const VideoList = (props) => \{
\b0 \
\
	//Stay away from for loops as much as possible. Instead, try to use ITERATORS\
	// 'array.map' is a good one to use instead\
	//	This calls the function input inside 'map()' on EACH element of the array and RETURNS this new array\
\
	
\b const videoItems = props.videos.map((video) => \{\
		return <VideoListItem video = \{video\} />\
	\});	
\b0 \
\
	// The below statement will equal the array of videos that YTSearch returns in the parent component index.js\
	// const videos = props.videos;\
\
	
\b return (\

\b0 		//We use 'className' to name the class of this HTML element (just like using 'class' but avoids any naming conflicts with defining a class component)\
\
		//'col-md-4' is a BOOTSTRAP term for a 'medium column of width 4'\
\
\
		
\b <ul className = "col-md-4 list-group">
\b0 \
\
			\{/* Even though this is just an ARRAY of components, React is smart and will try to render all the components AUTOMATICALLY */\}\

\b \
			\{videoItems\}\
\
		</ul>\
		);\
\};\
\
\
\

\b0 \'97\'97video_list_item\'97\'97\'97\
\
\

\b import React from 'react';\
\
const VideoListItem = (props) => \{\
	return <li>Video</li>;\
\};\
\
export default VideoListItem;}