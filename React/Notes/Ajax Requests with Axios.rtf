{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf810
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww33400\viewh20520\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
\'97actions/index.js\'97\
\

\b import axios from 'axios';\
\
const API_KEY = 'eacc07830fd7d628994f5254d19ba01d'\
const ROOT_URL = `http://api.openweathermap.org/data/2.5/forecast?appid=$\{API_KEY\}`;
\b0 \
\
//Exporting this as a variable ENSURES consistency and easy adjustment when needed\

\b export const FETCH_WEATHER = 'FETCH_WEATHER'\
\
export function fetchWeather(city) \{
\b0 \
\
    //For query fragments, it does not matter which order they come in as long as they are enjoined by &\

\b     const url = `$\{ROOT_URL\}&q=\{city\},us`;
\b0 \
\
    //This returns a promise \
   
\b  const request = axios.get(url);
\b0 \

\b \
    return (\{\
        type: FETCH_WEATHER,\
        payload: request\
        \});\
\}\
\

\b0 \'97containers/search-bar.js\'97\
\

\b  onFormSubmit(event) \{
\b0 \
\

\b         event.preventDefault();
\b0 \
\
        //Now we can go ahead and do what we actually want to do on a submit - like getting weather data\
 
\b      \ul   this.props.fetchWeather(this.state.term);\ulnone \
        this.setState(\{ term: '' \});\
\
    \}}