{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf810
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww33400\viewh20520\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Middleware does stuff with our actions BEFORE they are passed into our reducers\
\
Redux - Promise is a piece of middleware\
\
We\'92ll go into more detail later.\
\
 \
\'97index.js\'97\'97\
\

\b import React from 'react';\
import ReactDOM from 'react-dom';\
import \{ Provider \} from 'react-redux';\
\ul import \{ createStore, applyMiddleware \} from 'redux';\
import ReduxPromise from 'redux-promise';\ulnone \
\
import App from './components/app';\
import reducers from './reducers';\
\
\ul const createStoreWithMiddleware = applyMiddleware(ReduxPromise)(createStore);\ulnone \
\
ReactDOM.render(\
  <Provider store=\{createStoreWithMiddleware(reducers)\}>\
    <App />\
  </Provider>\
  , document.querySelector('.container'));\
\
\

\b0 \'97actions/index.js\'97\
\

\b export function fetchWeather(city) \{\
    const url = `$\{ROOT_URL\}&q=\{city\},us`;\
\
   
\b0  \ul //This returns a promise 
\b \
    const request = axios.get(url);\
\ulnone \
    console.log('Request:', request);\
    \
    return (\{\
        type: FETCH_WEATHER,\
        payload: request\
        \});\
\}\
\

\b0 \
\'97reducers/reducer_weather.js\'97\
\
//NOTE: BUT by the time the promise reaches this reducer, it has already been resolved!\
// When the \'91ReduxPromise\'92 middleware DETECTS that the PAYLOAD is a PROMISE, it STOPS the action, WAITS for it to be RESOLVED, and then creates a NEW action with the RESOLVED RESPONSE as the PAYLOAD\
\

\b export default function(state = [], action) \{\
    console.log('Action received', action);\
\
    return state;  \
\}}