{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf810
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww33400\viewh20520\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
\
\'97components/app.js\'97\
\

\b import React, \{ Component \} from 'react';\
\
\ul import BookList from '../containers/book-list';\ulnone \
\
export default class App extends Component \{\
  render() \{\
    return (\
        <div>\
\ul            <BookList />\ulnone \
        </div>\
    );\
  \}\
\}\
\
\

\b0 \'97\'97containers/book-list.js\'97\'97\'97\
\

\b import React, \{ Component \} from 'react';\

\b0 \
//Remember that with curly braces, we're just pulling out a PROPERTY OF the object that is being exported from 'react-redux'\
// Rather than the whole object itself\

\b import \{ connect \} from 'react-redux';
\b0 \
\
//Removed: export default, we want to export the CONTAINER not the 'dumb' component part of this file\

\b class BookList extends Component \{\

\b0     \
  
\b   renderList() \{\
        return this.props.books.map((book) => \{\
            return (
\b0 \
\
              
\b   <li key=\{book.title\} className="list-group-item">\
                    \{book.title\}\
                </li>\
                )\
        \})\
    \}\
\
    render() \{\
        return (\
            <ul className="list-group col-sm-4">\
                \{this.renderList()\}\
            </ul>\
        )\
    \}\
\}\

\b0 \
//Takes our APPLICATION'S state as an argument\
\
//NOTE: Whenever our APPLICATION STATE CHANGES (loading a list of books from a server), this container will AUTOMATICALLY RE-RENDER with the NEW LIST OF BOOKS\
\
\

\b function mapStateToProps(state) \{\

\b0     // Whatever is returned from here will be set as 'this.props' in our component\
\

\b     return \{\

\b0 \
        //The key 'books' is what the property will be called in props => this.props.books\
\
        //    Ex: asdf: '123' ==> 'this.props.asdf' will equal '123'\

\b         books: state.books\
    \};\
\}\

\b0 \
//Exporting the CONTAINER\
// ------Connect-------\
/*\
    Connect takes in a function and a component and PRODUCES A CONTAINER (a component that is aware of the state within redux)\
*/\

\b export default connect(mapStateToProps)(BookList);
\b0 \
\
\
\
}