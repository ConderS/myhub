{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf810
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww33400\viewh21000\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
\
\
\'97reducer_active_book\'97\
\
//State argument is not application state, only the PIECE of the state this reducer is reponsible for - one part of the state stored in Redux\
\
//All reducers get two arguments: the current state, and our action\
// Called whenever an action is dispatched by our app\
\
//State is by default set to null if there is no value in it when the this method is called\
//  Ex: User just boots up the app \

\b export default function(state = null, action) \{\
    \
    switch(action.type) \{\
        case 'BOOK_SELECTED':
\b0 \
\
            //Only return fresh objects.\
            // Don't mutate the state in between here before returning it.\
            // i.e. \
            //  DO NOT: state.title = book.title; return state; \
   
\b          return action.payload;\
    \}\

\b0  \
    //Adding a base case to return the state as it is if it's something that we don't care about\
    //  Ex: If user boots app up and they haven't chosen any active book yet (in this case we also set 'state' to null by default so that it is NOT UNDEFINED (we get an error for this))\

\b     return state\
\}\
\
\
\

\b0 \'97index.js\'97\
\'85\
\

\b import ActiveBook from './reducer_active_book';\
\
\
const rootReducer = combineReducers(\{\

\b0 \

\b   books: BooksReducer,\
  activeBook: ActiveBook\
\
\});\
\
\

\b0 \
\'97-book-detail.js\'97\
\
//This is the highest order component that cares specifically about what the active book is - therefore we make this a container\
\
i
\b mport React, \{ Component \} from 'react';\
import \{ connect \} from 'react-redux';\
\
\
class BookDetail extends Component \{\
    render() \{\
        return (\
            <div>Book Detail!</div>\
        );\
    \}\
\}
\b0 \
\

\b function mapStateToProps(state) \{\
    return \{
\b0 \
        //Value 'state.activeBook' specified in the redux state (reducers/index.js)\
     
\b    book: state.activeBook\
    \};\
\}\
\
export default connect(mapStateToProps)(BookDetail);\
\
\

\b0 \'97app.js\'97\

\b \
import React, \{ Component \} from 'react';\
\
import BookList from '../containers/book-list';\
\ul import BookDetail from '../containers/book-detail.js';\ulnone \
\
export default class App extends Component \{\
  render() \{\
    return (\
        <div>\
           <BookList />\
          \ul  <BookDetail />\ulnone \
        </div>\
    );\
  \}\
\}\
\
}